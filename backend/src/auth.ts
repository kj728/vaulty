import { Request,Response } from "express";
import mysql from 'mysql2/promise'
import {v4 as uid} from 'uuid'

import { sqlConfig } from "./config";
import { sqlConfiguration, sqlError, UsersBasicInfo } from "./models";
import { registerSchema,loginEmailSchema,loginUsernameSchema } from "./validators";

const pool = mysql.createPool(sqlConfig)


export async function registerUser(request:Request,response:Response){
  /*
  * Registers new users into the system
  * id is auto-generated by uuid()
  * user input is validated and checked for errors
  * if none user is added to the system
  * if any error occurrs, user will not be added to system
  * appropriate response message and codes are sent back
  */

  const id = uid()
  const {username,email,phoneNumber,password} = request.body
  const {error} = registerSchema.validate(request.body)

  try {
    if (error) {
      return response.status(400).json(error)
    } else {
      const connection = await pool.getConnection()
      const [rows1,fields1] = await connection.query(
        `INSERT INTO userBasicInfo VALUES(
        '${id}',
        '${username}',
        '${email}',
        '${phoneNumber}',
        '${password}',
        DEFAULT,
        0,
        0
        );`
      )  

      const [rows2,fields2] = await connection.query(
        `SELECT * FROM userBasicInfo
        WHERE id='${id}' AND isDeleted=0;`
      ) 
      connection.release()

      const User = rows2 as Array<UsersBasicInfo>

      return response.status(200).json({message:`Congratulations ${User[0].username}! You have successfully been registered on the system.`})
    }

  } catch (error:sqlError | any) {
    console.log(error)
      return response.status(500).json({error:`An error occurred: `+error.sqlMessage})
  }
}

export async function loginUser(request:Request,response:Response){
    /*
     * Login already existing users into the system
     * if any error occurrs, user will not be logged into system
     * appropriate response message and codes are sent back
    */

    const {emailOrUsername,password} = request.body
    const emailRegex = /^[\w\.-]+@[a-zA-Z\d\.-]+\.[a-zA-Z]{2,}$/
    const connection = await pool.getConnection()
    // console.log(emailRegex.test(emailOrUsername))

    try {
      if (emailRegex.test(emailOrUsername)) {
        // if email
        const {error} = loginEmailSchema.validate(request.body)

        if (!error){
          // if no error
          const [rows,results] = await connection.query(
            `SELECT * FROM userBasicInfo WHERE
            email='${emailOrUsername}' AND isDeleted=0;`
          )
          const user = rows as Array<UsersBasicInfo>
          console.log(user[0])

          if (user) {
            // if user exists
            if (user[0].password === password){
              return response.status(200).json({message:`Welcome back ${user[0].username}!`})
            }
            return response.status(400).json({error:`Oh no. Looks like the passwords do not match, try again?`})
          } else {
            // if user doesnt exist
            return response.status(400).json({error:`Oops! User does not exist. Try a different email/username?`})

          }
        }
        // if error in validation schema
        return response.status(400).json(error)
        
      } else if (!emailRegex.test(emailOrUsername)){
        // if not email
        const {error} = loginUsernameSchema.validate(emailOrUsername)
        if (error){
          // if no error
          const [rows,results] = await connection.query(
            `SELECT * FROM userBasicInfo WHERE
            username='${emailOrUsername}' AND isDeleted=0;`
          )
          const user = rows as Array<UsersBasicInfo>
          console.log(user[0])

          if (user) {
            // if user exists
            if (user[0].password === password){
              return response.status(200).json({message:`Welcome back ${user[0].username}!`})
            }
            return response.status(400).json({error:`Oh no. Looks like the passwords do not match, try again?`})
          } else {
            // if user doesnt exist
            return response.status(400).json({error:`Oops! User does not exist. Try a different email/username?`})
          }
        }
        // if error in validation schema
        return response.status(400).json(error)
        
      } else {
        // otherwise
        return response.status(400).json({error:`Invalid inputs. Please try again?`})
      }
      
    } catch (error:sqlError | any) {
      return response.status(500).json({error:`An error occurred: `+error.sqlMessage})
    }
    
}
